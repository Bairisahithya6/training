day 12::

def bfs(a, n):
    visited = []                                                              output
    queue = [n]                                                                   5
    while queue:                                                                  7
        node = queue.pop(0)                                                       3
        if node not in visited:                                                   4
            visited.append(node)                                                  8
            print(node)                                                           2
            for neighbor, _ in a.get(node, []):
                if neighbor not in visited and neighbor not in queue:
                    queue.append(neighbor)
def fun(a, x, e, c, m, l1):
    l.append(x)
    if x == e:
        if c < m:
            m = c
            l1 = l.copy()
        l.pop()
        return m, l1
    for i in a.get(x, []):
        if i[0] not in l:
            m, l1 = fun(a, i[0], e, c + i[1], m, l1)
    l.pop()
    return m, l1
a = {
    5: [(7, 2), (3, 1)],
    3: [(5, 1), (7, 2), (8, 3)],
    7: [(5, 2), (3, 2), (4, 6)],
    4: [(7, 6), (8, 1), (2, 2)],
    8: [(3, 3), (4, 1), (2, 1)],
    2: [(4, 2), (8, 1)]
}
l = []
print("BFS traversal from node 5:")
bfs(a, 5)
start_node = 5
end_node = 2
min_cost = float('inf')
shortest_path = []  
___________________________________________________________________________________________
l1 = [6, 3, 2, 9, 4, 7]
l2 = [8, 7, 5, 3, 6, 9]
                                                                        output:[13, 11, 9, 15, 9, 7, 5, 11, 11, 9, 7, 13]
result = [x + y for x in l1 for y in l2 if x % 2 == 0 and y % 2 != 0]

print(result)                

