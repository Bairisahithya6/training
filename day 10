day 10:

def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):                         output:  [7, 13, 19, 31, 67]
        if n % i == 0:
            return False
    return True
def top_prime_between(x, y):
    for num in range(y-1, x, -1):
        if is_prime(num):
            return num
    return None
ip = [4, 8, 14, 22, 36, 68]
output = [top_prime_between(ip[i], ip[i+1]) for i in range(len(ip) - 1)]
print("Top prime numbers :", output)
_____________________________________________________________________________________________________________________________________
class tree:
    class node:
        def __init__(self, u):                                             output: Inorder: [1, 2, 3, 5, 7, 10, 15]
            self.data = u                                                           Preorder: [10, 5, 2, 1, 3, 7, 15]
            self.left = None                                                        Postorder: [1, 3, 2, 7, 5, 15, 10]
            self.right = None                                                       Sum of all nodes: 43                                                     
   def __init__(self):                                                              Sum of left nodes: 18
        self.root = None                                                             Sum of even nodes: 12 
    def create(self, root, x):                                                       Sum of odd nodes: 31
        if root is None:                                                             Difference between even and odd sums: -19
            return self.node(x)                                                      Height of the tree: 3 
        elif x < root.data:                                                          Balanced tree check: True 
            root.left = self.create(root.left, x)                                     Count of leaf nodes: 4    
        else:                                                                         Sum of leaf nodes: 26
            root.right = self.create(root.right, x)                                  Top View: [10, 5, 15, 2, 1]     
        return root                                                                  Bottom View: [1, 2, 3, 7, 15]
    def inorder(self, root, re=None):                                                Left View: [10, 5, 2, 1]
        if re is None:                                                               Right View: [10, 15, 7, 3]
            re = []
        if root:
            self.inorder(root.left, re)
            re.append(root.data)
            self.inorder(root.right, re)
        return re
    def preorder(self, root, re=None):
        if re is None:
            re = []
        if root:
            re.append(root.data)
            self.preorder(root.left, re)
            self.preorder(root.right, re)
        return re
    def postorder(self, root, re=None):
        if re is None:
            re = []
        if root:
            self.postorder(root.left, re)
            self.postorder(root.right, re)
            re.append(root.data)
        return re
    def sum_tree(self, root):
        if root is None:
            return 0
        return root.data + self.sum_tree(root.left) + self.sum_tree(root.right)
    def sum_even(self, root):
        if root is None:
            return 0
        sum_left = self.sum_even(root.left)
        sum_right = self.sum_even(root.right)
        return (root.data if root.data % 2 == 0 else 0) + sum_left + sum_right
    def sum_odd(self, root):
        if root is None:
            return 0
        sum_left = self.sum_odd(root.left)
        sum_right = self.sum_odd(root.right)
        return (root.data if root.data % 2 != 0 else 0) + sum_left + sum_right
    def diff_eo(self, root):
        even_sum = self.sum_even(root)
        odd_sum = self.sum_odd(root)
        return even_sum - odd_sum
    def height(self, root):
        if root is None:
            return -1
        left_height = self.height(root.left)
        right_height = self.height(root.right)
        return max(left_height, right_height) + 1
    def balanced(self, root):
        if root is None:
            return 0
        left = self.balanced(root.left)
        right = self.balanced(root.right)
        return abs(left - right) <= 1
    def leaf_node(self, root):
        if root is None:
            return 0
        if root.left is None and root.right is None:
            return 1
        return self.leaf_node(root.left) + self.leaf_node(root.right)
    def sum_leaf_nodes(self, root):
        if root is None:
            return 0
        if root.left is None and root.right is None:
            return root.data
        return self.sum_leaf_nodes(root.left) + self.sum_leaf_nodes(root.right)
    def search(self, root, key):
        if root is None or root.data == key:
            return root
        if key < root.data:
            return self.search(root.left, key)
        return self.search(root.right, key)
    def top_view(self):
        if not self.root:
            return []
        result = []
        queue = [(self.root, 0)]  
        hd_dict = {}  
        while queue:
            node, hd = queue.pop(0)
            if hd not in hd_dict:
                hd_dict[hd] = node.data
                result.append(node.data)
            if node.left:
                queue.append((node.left, hd - 1))
            if node.right:
                queue.append((node.right, hd + 1))
        return result
    def bottom_view(self):
        if not self.root:
            return []
        result = []
        queue = [(self.root, 0)]  
        hd_dict = {}  
        while queue:
            node, hd = queue.pop(0)
            hd_dict[hd] = node.data
            if node.left:
                queue.append((node.left, hd - 1))
            if node.right:
                queue.append((node.right, hd + 1))
        for hd in sorted(hd_dict.keys()):
            result.append(hd_dict[hd])
        return result
    def left_view(self):
        if not self.root:
            return []
        result = []
        queue = [self.root]
        while queue:
            level_size = len(queue)
            for i in range(level_size):
                node = queue.pop(0)
                if i == 0:  
                    result.append(node.data)
                if node.left:
                    queue.append(node.left)
                if node.right:
                    queue.append(node.right)
        return result
    def right_view(self):
        if not self.root:
            return []
        result = []
        queue = [self.root]
        while queue:
            level_size = len(queue)
            for i in range(level_size):
                node = queue.pop(0)
                if i == level_size - 1:  
                    result.append(node.data)
                if node.left:
                    queue.append(node.left)
                if node.right:
                    queue.append(node.right)
        return result
t1 = tree()
t1.root = t1.create(t1.root, 10)
t1.root = t1.create(t1.root, 5)
t1.root = t1.create(t1.root, 15)
t1.root = t1.create(t1.root, 2)
t1.root = t1.create(t1.root, 7)
t1.root = t1.create(t1.root, 1)
t1.root = t1.create(t1.root, 3)
print("Inorder:", t1.inorder(t1.root))
print("Preorder:", t1.preorder(t1.root))
print("Postorder:", t1.postorder(t1.root))
print("Sum of all nodes:", t1.sum_tree(t1.root))
print("Sum of left nodes:", t1.sum_tree(t1.root.left))
print("Sum of even nodes:", t1.sum_even(t1.root))
print("Sum of odd nodes:", t1.sum_odd(t1.root))
print("Difference between even and odd sums:", t1.diff_eo(t1.root))
print("Height of the tree:", t1.height(t1.root))
print("Balanced tree check:", t1.balanced(t1.root))
print("Count of leaf nodes:", t1.leaf_node(t1.root))
print("Sum of leaf nodes:", t1.sum_leaf_nodes(t1.root))
print("Top View:", t1.top_view())
print("Bottom View:", t1.bottom_view())
print("Left View:", t1.left_view())
print("Right View:", t1.right_view())
_______________________________________________________________________________________________________________________________________
class tree:
    class node:
        def __init__(self, u):
            self.data = u
            self.left = None
            self.right = None
    
    def __init__(self):
        self.root = None
    
    def create(self, root, x):
        if root is None:
            return self.node(x)
        elif x < root.data:
            root.left = self.create(root.left, x)
        else:
            root.right = self.create(root.right, x)
        return root
    
    def inorder(self, root, re=None):
        if re is None:
            re = []
        if root:
            self.inorder(root.left, re)
            re.append(root.data)
            self.inorder(root.right, re)
        return re
    
    def preorder(self, root, re=None):
        if re is None:
            re = []
        if root:
            re.append(root.data)
            self.preorder(root.left, re)
            self.preorder(root.right, re)
        return re
    
    def postorder(self, root, re=None):
        if re is None:
            re = []
        if root:
            self.postorder(root.left, re)
            self.postorder(root.right, re)
            re.append(root.data)
        return re
    
    def sum_tree(self, root):
        if root is None:
            return 0
        return root.data + self.sum_tree(root.left) + self.sum_tree(root.right)
    
    def sum_even(self, root):
        if root is None:
            return 0
        sum_left = self.sum_even(root.left)
        sum_right = self.sum_even(root.right)
        return (root.data if root.data % 2 == 0 else 0) + sum_left + sum_right
    
    def sum_odd(self, root):
        if root is None:
            return 0
        sum_left = self.sum_odd(root.left)
        sum_right = self.sum_odd(root.right)
        return (root.data if root.data % 2 != 0 else 0) + sum_left + sum_right
    
    def diff_eo(self, root):
        even_sum = self.sum_even(root)
        odd_sum = self.sum_odd(root)
        return even_sum - odd_sum
    
    def height(self, root):
        if root is None:
            return -1
        left_height = self.height(root.left)
        right_height = self.height(root.right)
        return max(left_height, right_height) + 1
    
    def balanced(self, root):
        if root is None:
            return 0
        left = self.balanced(root.left)
        right = self.balanced(root.right)
        return abs(left - right) <= 1
    
    def leaf_node(self, root):
        if root is None:
            return 0
        if root.left is None and root.right is None:
            return 1
        return self.leaf_node(root.left) + self.leaf_node(root.right)
    
    def sum_leaf_nodes(self, root):
        if root is None:
            return 0
        if root.left is None and root.right is None:
            return root.data
        return self.sum_leaf_nodes(root.left) + self.sum_leaf_nodes(root.right)
    
    def search(self, root, key):
        if root is None or root.data == key:
            return root
        if key < root.data:
            return self.search(root.left, key)
        return self.search(root.right, key)
    
    def top_view(self):
        if not self.root:
            return []
        result = []
        queue = [(self.root, 0)]
        hd_dict = {}
        while queue:
            node, hd = queue.pop(0)
            if hd not in hd_dict:
                hd_dict[hd] = node.data
                result.append(node.data)
            if node.left:
                queue.append((node.left, hd - 1))
            if node.right:
                queue.append((node.right, hd + 1))
        return result
    
    def bottom_view(self):
        if not self.root:
            return []
        result = []
        queue = [(self.root, 0)]
        hd_dict = {}
        while queue:
            node, hd = queue.pop(0)
            hd_dict[hd] = node.data
            if node.left:
                queue.append((node.left, hd - 1))
            if node.right:
                queue.append((node.right, hd + 1))
        for hd in sorted(hd_dict.keys()):
            result.append(hd_dict[hd])
        return result
    
    def left_view(self):
        if not self.root:
            return []
        result = []
        queue = [self.root]
        while queue:
            level_size = len(queue)
            for i in range(level_size):
                node = queue.pop(0)
                if i == 0:
                    result.append(node.data)
                if node.left:
                    queue.append(node.left)
                if node.right:
                    queue.append(node.right)
        return result
    
    def right_view(self):
        if not self.root:
            return []
        result = []
        queue = [self.root]
        while queue:
            level_size = len(queue)
            for i in range(level_size):
                node = queue.pop(0)
                if i == level_size - 1:
                    result.append(node.data)
                if node.left:
                    queue.append(node.left)
                if node.right:
                    queue.append(node.right)
        return result
    
    def level_order(self):
        if not self.root:
            return []
        result = []
        queue = [self.root]
        while queue:
            level_size = len(queue)
            level = []
            for _ in range(level_size):
                node = queue.pop(0)
                level.append(node.data)
                if node.left:
                    queue.append(node.left)
                if node.right:
                    queue.append(node.right)
            result.append(level)
        return result

t1 = tree()
t1.root = t1.create(t1.root, 10)
t1.root = t1.create(t1.root, 5)
t1.root = t1.create(t1.root, 15)
t1.root = t1.create(t1.root, 2)
t1.root = t1.create(t1.root, 7)
t1.root = t1.create(t1.root, 1)
t1.root = t1.create(t1.root, 3)

print("Inorder:", t1.inorder(t1.root))
print("Preorder:", t1.preorder(t1.root))
print("Postorder:", t1.postorder(t1.root))
print("Sum of all nodes:", t1.sum_tree(t1.root))
print("Sum of left nodes:", t1.sum_tree(t1.root.left))
print("Sum of even nodes:", t1.sum_even(t1.root))
print("Sum of odd nodes:", t1.sum_odd(t1.root))
print("Difference between even and odd sums:", t1.diff_eo(t1.root))
print("Height of the tree:", t1.height(t1.root))
print("Balanced tree check:", t1.balanced(t1.root))
print("Count of leaf nodes:", t1.leaf_node(t1.root))
print("Sum of leaf nodes:", t1.sum_leaf_nodes(t1.root))
print("Top View:", t1.top_view())
print("Bottom View:", t1.bottom_view())
print("Left View:", t1.left_view())
print("Right View:", t1.right_view())
print("level order:", t1.level_order())
                                                output:    Inorder: [1, 2, 3, 5, 7, 10, 15]
                                                          Preorder: [10, 5, 2, 1, 3, 7, 15]
                                                             Postorder: [1, 3, 2, 7, 5, 15, 10]
                                                                Sum of all nodes: 43
                                                                      Sum of left nodes: 18
                                                                           Sum of even nodes: 12
                                                                         Sum of odd nodes: 31
                                                             Difference between even and odd sums: -19
                                                                        Height of the tree: 3
                                                                    Balanced tree check: True
                                                                        Count of leaf nodes: 4
                                                                           Sum of leaf nodes: 26
                                                                       Top View: [10, 5, 15, 2, 1]
                                                                 Bottom View: [1, 2, 3, 7, 15]
                                                                   Left View: [10, 5, 2, 1]
                                                                  Right View: [10, 15, 7, 3]
                                                             level order: [[10], [5, 15], [2, 7], [1, 3]]

__________________________________________________________________________________________________________________________________________________________________
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution(object):
    def rightSideView(self, root):
        if not root:
            return None
        queue = []
        queue.append(root)
        most_right = []
        while len(queue) > 0:
            n = len(queue)
            most_right.append(queue[-1].val)
            for i in range(n):
                element = queue.pop(0)
                if element.left:
                    queue.append(element.left)
                if element.right:
                    queue.append(element.right)
        return most_right
