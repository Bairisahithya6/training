day 3

def decrypt_caesar_cipher(cipher_text, shift):
    decrypted_text = ""
    for char in cipher_text:
        if char.isalpha():  
            shift_amount = shift % 26  
            new_char = ord(char) - shift_amount
            if char.islower():
                if new_char < ord('a'):
                    new_char += 26
            elif char.isupper():
                if new_char < ord('A'):
                    new_char += 26
            decrypted_text += chr(new_char)
        else:
            decrypted_text += char  
    return decrypted_text
cipher_text = input("Enter the encrypted text: ")
shift = int(input("Enter the shift value: "))
plain_text = decrypt_caesar_cipher(cipher_text, shift)
print("Decrypted text:", plain_text)


2.
def longest_a_s(s):
    max_len = 0
    current_len = 1
    for i in range(1, len(s)):
        if ord(s[i]) == ord(s[i - 1]) + 1:
            current_len += 1
        else:
            max_len = max(max_len, current_len)
            current_len = 1
    max_len = max(max_len, current_len)
    return max_len
input_str = "xyzabcdefklmnopqefgh"
print("The length of the longest substring in alphabetical sequence is:", longest_a_s(input_str))

a=input()
c=1
m=0
for i in range(len(a)-1):
    if(ord(a[i])==ord(a[i+1])-1):
        c=c+1
    else:
            if(c>m):
                m=c
            c=1
    if(c>m):
        m=c
    print(m)

def can_form_string(l, t):
    num_l = len(l)
    t_length = len(t)
    for i in range(t_length):
        l_index = i % num_lines
        if t[i] not in lines[l_index]:
            return "no"
    return "yes"
def main():
    num_lines = int(input("Enter the number of lines: "))
    lines = []
    for _ in range(num_lines):
        l = input("Enter l: ")
        lines.append(line)
    t = input("Enter the target string: ")
    result = can_form_string(lines, t)
    print(result)   
if __name__ == "__main__":
    main()
questons:
input - hello   " l replaceble to p"
output - heppo

input-
    [4,7,1,4,1,3]
    3
    5
output- 2

recursion:

def fun(x):
    if(x==1):
        return 1
    if(x==2):
        return 2
    return fun(x-1)+fun(x-2)+x

print(fun(5))




a = 5
k=1
for i in range(5):
    for j in range(5):
        if(i==0 or j==0 or i==a-1 or j==a-1):
            print("*",end=' ')
        else:
            print(k,end=' ')
            k=k+1
    print()
