day6 

1.list=[4,8,2,4,4,8,4]
frpm the list print where that number occur more than the half of the list length ?

x = [1, 1,  1, 2, 2, 1]
half_length = len(x) / 2
occurrences = {}
for num in x:
    if num in occurrences:
        occurrences[num] += 1
    else:
        occurrences[num] = 1 
for num, count in occurrences.items():
    if count > half_length:
        print(num)

 ________________________________       
a=[1,1,1,2,2,1]
a.sort()
x=len(a)/2
print(x)

_________________________
a=[1,1,1,2,2,2,3]
c=1
p=a[0]
for i in range(1,len(a)):
    if(a[i]==p):
        c=c+1
    else:
        if(c==0):
            p=a[i]
            
print(p)
 

-----------------------------------------------------------------------------


def find_missing_number(nums):                               output:4
    n = len(nums)
    expected_sum = n * (n + 1) // 2
    actual_sum = sum(nums)
    missing_number = expected_sum - actual_sum
    return missing_number
nums = [0, 5, 3, 6, 7, 2, 1]
missing_number = find_missing_number(nums)
print(missing_number)
 
_____________________________________________________
ip= 5 7 8 2 1 4 op= 7 5 2 8 4 1   withot swapping?

class Node:
    def __init__(self, data=None):
        self.data = data
        self.next = None
class LinkedList:
    def __init__(self):
        self.head = None
    def append(self, data):
        new_node = Node(data)
        if not self.head:
            self.head = new_node
            return
        last_node = self.head
        while last_node.next:
            last_node = last_node.next
        last_node.next = new_node
    def print_list(self):
        current_node = self.head
        while current_node:
            print(current_node.data, end=" ")
            current_node = current_node.next
        print()
    def reorder(self, positions):
        new_list = LinkedList()
        current_node = self.head
        while current_node:
            next_node = current_node.next
            insert_position = positions[current_node.data]
            if not new_list.head or insert_position < positions[new_list.head.data]:
                current_node.next = new_list.head
                new_list.head = current_node
            else:
                prev_node = None
                insert_node = new_list.head
                while insert_node and positions[insert_node.data] < insert_position:
                    prev_node = insert_node
                    insert_node = insert_node.next
                prev_node.next = current_node
                current_node.next = insert_node
            current_node = next_node
        return new_list
input_sequence = [5, 7, 8, 2, 1, 4]
desired_positions = {7: 0, 5: 1, 2: 2, 8: 3, 4: 4, 1: 5}
input_linked_list = LinkedList()
for element in input_sequence:
    input_linked_list.append(element)
output_linked_list = input_linked_list.reorder(desired_positions)
output_linked_list.print_list()

___________________________________________________________________________
def gcd(a, b):
    while b:
        a, b = b, a % b
    return a
def are_coprime(num1, num2):
    return gcd(num1, num2) == 1
num1 = int(input("Enter the first number: "))
num2 = int(input("Enter the second number: "))
if are_coprime(num1, num2):
    print(f"{num1} and {num2} are coprime numbers.")
else:
    print(f"{num1} and {num2} are not coprime numbers.") 

________________________________________________________________________________
def check_balance(s):
    stack = []
    brackets = {')': '(', ']': '[', '}': '{'}
    for i, char in enumerate(s):
        if char in brackets.values():  
            stack.append((char, i))
        elif char in brackets.keys(): 
            if stack and stack[-1][0] == brackets[char]:
                stack.pop()
            else:
                return i
    if stack:
        return stack[-1][1]  
    return -1  
s = "(([{}]))"    
result = check_balance(s)
print(result)  


