day 13:
[2,5,2,3,6,7,1,0,5]
     |
    ||
 |  ||  |
 |  ||  |
 | |||  |
||||||  |
||||||| |

output: 14
the question is like a waterfall that the trapped water containers countable?  

def trapped_water(h):
    if not h:
        return 0
    n = len(h)
    left_max = [0] * n
    right_max = [0] * n
    water = 0
    left_max[0] = h[0]
    for i in range(1, n):
        left_max[i] = max(left_max[i - 1], h[i])
    right_max[n - 1] = h[n - 1]
    for i in range(n - 2, -1, -1):
        right_max[i] = max(right_max[i + 1], h[i])
    for i in range(n):
        water += min(left_max[i], right_max[i]) - h[i]
    return water
h = [2, 5, 2, 3, 6, 7, 1, 0, 5]
print(trapped_water(h))  

___________________________________________________________________________________

def min_coins(coins, amount):
    dp = [float('inf')] * (amount + 1)         output : 4
    dp[0] = 0
    for coin iaxn coins:
        for i in range(coin, amount + 1):
            dp[i] = min(dp[i], dp[i - c oin] + 1)
    return dp[amount]
coins = [1, 3, 4, 5]
amount = 17
result = min_coins(coins, amount)
print(result)  
_______________________________________________________________________________
def find_paths(i, j, m, n, path, all_paths):
    if i == m - 1 and j == n - 1:
        all_paths.append(path + [(i, j)])
        return
    if j + 1 < n:
        find_paths(i, j + 1, m, n, path + [(i, j)], all_paths)
    if i + 1 < m:
        find_paths(i + 1, j, m, n, path + [(i, j)], all_paths)
def count_paths(i, j, m, n):
    if i == m - 1 and j == n - 1:
        return 1
    if i >= m or j >= n:
        return 0
    return count_paths(i, j + 1, m, n) + count_paths(i + 1, j, m, n)
m = 4
n = 3
number_of_paths = count_paths(0, 0, m, n)
all_paths = []
find_paths(0, 0, m, n, [], all_paths)
print(f"The number of unique paths in a {m}x{n} matrix is: {number_of_paths}")
print("All paths:")
for path in all_paths:
    print(path)
